var documenterSearchIndex = {"docs":
[{"location":"instruments/#api_getInstrumentAsJSON","page":"Instruments","title":"api_getInstrumentAsJSON","text":"","category":"section"},{"location":"instruments/","page":"Instruments","title":"Instruments","text":"api_getInstrumentAsJSON","category":"page"},{"location":"instruments/#TDAmeritradeAPI.api_getInstrumentAsJSON","page":"Instruments","title":"TDAmeritradeAPI.api_getInstrumentAsJSON","text":"api_getInstrumentAsJSON(cusip::String, apiKeys::TDAmeritradeAPI.apiKeys)::ErrorTypes.Result{String, String}\n\nMake the TDAmeritradeAPI call to the get_instrument endpoint, and return the raw JSON.\n\nAn ErrorTypes.jl Option object will be returned that can be evaluated with ErrorTypes.@?\n\nExample\n\napi_getInstrumentAsJSON(\"NET\", apiKey)\nResult{String, String}(Ok(\"[{\"cusip\":\"18915M107\",\"symbol\":\"NET\",\"description\":\"CLOUDFLARE INC COM CL A\",\"exchange\":\"EQY\",\"assetType\":\"EQUITY\"}]\"))\n\n\n\n\n\n","category":"function"},{"location":"instruments/#api_getInstrumentAsDataFrame","page":"Instruments","title":"api_getInstrumentAsDataFrame","text":"","category":"section"},{"location":"instruments/","page":"Instruments","title":"Instruments","text":"api_getInstrumentAsDataFrame","category":"page"},{"location":"instruments/#TDAmeritradeAPI.api_getInstrumentAsDataFrame","page":"Instruments","title":"TDAmeritradeAPI.api_getInstrumentAsDataFrame","text":"api_getInstrumentAsDataFrame(cusip::String, apiKeys::TDAmeritradeAPI.apiKeys)::ErrorTypes.Option{DataFrame}\n\nMake the TDAmeritradeAPI call to the get_instrument endpoint, and return a DataFrame\n\nAn ErrorTypes.jl Option object will be returned that can be evaluated with ErrorTypes.@?\n\nExample\n\napi_getInstrumentAsDataFrame(\"NET\", apiKey)\nsome(1x7 DataFrame\n Row | bondPrice  cusip      symbol  description              exchange  assetType\n     | Nothing    String     String  String                   String    String   \n --------------------------------------------------------------------------------\n   1 |            18915M107  NET     CLOUDFLARE INC COM CL A  EQY       EQUITY)\n\n\nSee Also: api_getInstrumentAsJSON.\n\n\n\n\n\n","category":"function"},{"location":"instruments/#api_searchInstrumentsAsJSON","page":"Instruments","title":"api_searchInstrumentsAsJSON","text":"","category":"section"},{"location":"instruments/","page":"Instruments","title":"Instruments","text":"api_searchInstrumentsAsJSON","category":"page"},{"location":"instruments/#TDAmeritradeAPI.api_searchInstrumentsAsJSON","page":"Instruments","title":"TDAmeritradeAPI.api_searchInstrumentsAsJSON","text":"api_searchInstrumentsAsJSON(symbol::String, projection::String, apiKeys::TDAmeritradeAPI.apiKeys)::ErrorTypes.Result{String, String}\n\nMake the TDAmeritradeAPI call to the search_instruments endpoint, and return the raw JSON.\n\nAn ErrorTypes.jl Option object will be returned that can be evaluated with ErrorTypes.@?\n\nArguments\n\nprojection::String: The type of request:\nsymbol-search: Retrieve instrument data of a specific symbol or cusip\nsymbol-regex: Retrieve instrument data for all symbols matching regex. \nExample: symbol=XYZ.* will return all symbols beginning with XYZ\ndesc-search: Retrieve instrument data for instruments whose description contains the word supplied.\nExample: symbol=FakeCompany will return all instruments with FakeCompany in the description.\ndesc-regex: Search description with full regex support.\nExample: symbol=XYZ.[A-C] returns all instruments whose descriptions contain a word beginning with XYZ followed by a character A through C.\nfundamental: Returns fundamental data for a single instrument specified by exact symbol\n\nExample\n\napi_searchInstrumentsAsJSON(\"NET\", \"symbol-search\", apiKey)\nResult{String, String}(Ok(\"{\"NET\":{\"cusip\":\"18915M107\",\"symbol\":\"NET\",\"description\":\"Cloudflare, Inc. Class A Common Stock\",\"exchange\":\"NYSE\",\"assetType\":\"EQUITY\"}}\"))\n\napi_searchInstrumentsAsJSON(\"NET.*\", \"symbol-regex\", apiKey)\nResult{String, String}(Ok(\"{\"NET\":{\"cusip\":\"18915M107\",\"symbol\":\"NET\",\"description\":\"Cloudflare, Inc. Class A Common Stock\",\"exchange\":\"NYSE\",\"assetType\":\"EQUITY\"},\n                            \"NETTF\":{\"cusip\":\"G6427A102\",\"symbol\":\"NETTF\",\"description\":\"Netease Inc Ordinary Shares (PC)\",\"exchange\":\"Pink Sheet\",\"assetType\":\"EQUITY\"},\n[...]\n\napi_searchInstrumentsAsJSON(\"Cloud\", \"desc-search\", apiKey)\nResult{String, String}(Ok(\"{\"18911R100\":{\"cusip\":\"18911R100\",\"symbol\":\"18911R100\",\"description\":\"CLOUD MEDICAL DOCTOR SOFTWARE\",\"exchange\":\"Unknown\",\"assetType\":\"UNKNOWN\"},\n                            \"CLGUF\":{\"cusip\":\"18913C101\",\"symbol\":\"CLGUF\",\"description\":\"CLOUD NINE WEB3 TECHNOLOGIES INC Common Shares (QB)\",\"exchange\":\"Pink Sheet\",\"assetType\":\"EQUITY\"},\n[...]\n\napi_searchInstrumentsAsJSON(\".*Semiconductor.*\", \"desc-regex\", apiKey)\nResult{String, String}(Ok(\"{\"AOSL\":{\"cusip\":\"G6331P104\",\"symbol\":\"AOSL\",\"description\":\"Alpha and Omega Semiconductor Limited - Common Shares\",\"exchange\":\"NASDAQ\",\"assetType\":\"EQUITY\"},\n                            \"BESIY\":{\"cusip\":\"073320103\",\"symbol\":\"BESIY\",\"description\":\"BE Semiconductor Industries NV New York Registry Shares (PC)\",\"exchange\":\"Pink Sheet\",\"assetType\":\"EQUITY\"},\n[...]\n\napi_searchInstrumentsAsJSON(\"NET\", \"fundamental\", apiKey)\nResult{String, String}(Ok(\"{\"NET\":{\"fundamental\":{\"symbol\":\"NET\",\"high52\":132.45,\"low52\":37.37,\"dividendAmount\":0.0,\"dividendYield\":0.0,\n[...]\n\n\n\n\n\n","category":"function"},{"location":"instruments/#api_searchInstrumentsAsDataFrame","page":"Instruments","title":"api_searchInstrumentsAsDataFrame","text":"","category":"section"},{"location":"instruments/","page":"Instruments","title":"Instruments","text":"api_searchInstrumentsAsDataFrame","category":"page"},{"location":"instruments/#TDAmeritradeAPI.api_searchInstrumentsAsDataFrame","page":"Instruments","title":"TDAmeritradeAPI.api_searchInstrumentsAsDataFrame","text":"api_searchInstrumentsAsDataFrame(symbol::String, projection::String, apiKeys::TDAmeritradeAPI.apiKeys)::ErrorTypes.Option{DataFrame}\n\nMake the TDAmeritradeAPI call to the search_instruments endpoint, and return a DataFrame\n\nAn ErrorTypes.jl Option object will be returned that can be evaluated with ErrorTypes.@?\n\nExample\n\napi_searchInstrumentsAsDataFrame(\"NET\", \"symbol-search\", apiKey)\nsome(1x7 DataFrame\n Row | bondPrice  cusip      symbol  description                        exchange  assetType\n     | Nothing    String     String  String                             String    String   \n ------------------------------------------------------------------------------------------\n   1 |            18915M107  NET     Cloudflare, Inc. Class A Common    NYSE      EQUITY)\n\napi_searchInstrumentsAsDataFrame(\"NET.*\", \"symbol-regex\", apiKey)\nsome(13x7 DataFrame\n Row | bondPrice  cusip      symbol  description                        exchange    assetType\n     | Nothing    String     String  String                             String      String   \n --------------------------------------------------------------------------------------------\n   1 |            29287L205  NETZ    Engine No. 1 ETF Trust Engine No   BATS        ETF\n   2 |            64114L102  NETO    NetObjects, Inc. Common Stock (C   Pink Sheet  EQUITY\n   3 |            Y2294C107  NETI    Eneti Inc. Common Stock            NYSE        EQUITY\n   4 |            629567207  NETC.U  Nabors Energy Transition Corp. U   NYSE        EQUITY\n[...]\n\napi_searchInstrumentsAsDataFrame(\"Cloud\", \"desc-search\", apiKey)\nsome(21x7 DataFrame\n Row | bondPrice  cusip      symbol     description                        exchange    assetType\n     | Nothing    String     String     String                             String      String   \n -----------------------------------------------------------------------------------------------\n   1 |            G2215E109  CDBDF      CLOUDBREAK DISCOVERY PLC Ordinar   Pink Sheet  EQUITY\n   2 |            18912C102  18912C102  CLOUDMD SOFTWARE & SERVICES INC    Unknown     UNKNOWN\n   3 |            189125057  189125057  Cloudcommerce Inc                  Unknown     UNKNOWN\n   4 |            18912C102  PHGRF      CLOUDMD SOFTWARE & SVCS INC Comm   Pink Sheet  EQUITY\n[...]\n\napi_searchInstrumentsAsDataFrame(\"NET\", \"fundamental\", apiKey)\nsome(1x51 DataFrame\n Row | bondPrice cusip symbol description exchange assetType high52 low52 dividendAmount dividendYield dividendDate ...\n[...]\n\n\nSee Also: api_searchInstrumentsAsJSON.\n\n\n\n\n\n","category":"function"},{"location":"instruments/#parseInstrumentsJSONToDataFrame","page":"Instruments","title":"parseInstrumentsJSONToDataFrame","text":"","category":"section"},{"location":"instruments/","page":"Instruments","title":"Instruments","text":"parseInstrumentsJSONToDataFrame","category":"page"},{"location":"instruments/#TDAmeritradeAPI.parseInstrumentsJSONToDataFrame","page":"Instruments","title":"TDAmeritradeAPI.parseInstrumentsJSONToDataFrame","text":"parseInstrumentsJSONToDataFrame(json_string::String, api_call::String)::ErrorTypes.Option{DataFrame}\n\nConvert the JSON string returned by the TDAmeritradeAPI instruments API calls to a DataFrame.\n\nAn ErrorTypes.jl Option object will be returned that can be evaluated with ErrorTypes.@?\n\nExample\n\nparseInstrumentsJSONToDataFrame(read(\"./test/sample/instrument_equity.json\", String), \"get\")\nsome(1x6 DataFrame\n Row | bondPrice  cusip      symbol  description              exchange  assetType\n     | Nothing    String     String  String                   String    String\n --------------------------------------------------------------------------------\n   1 |            18915M107  NET     CLOUDFLARE INC COM CL A  EQY       EQUITY)\n\n\n\n\n\n","category":"function"},{"location":"instruments/#instrumentsToInstrumentDictStruct","page":"Instruments","title":"instrumentsToInstrumentDictStruct","text":"","category":"section"},{"location":"instruments/","page":"Instruments","title":"Instruments","text":"instrumentsToInstrumentDictStruct","category":"page"},{"location":"instruments/#TDAmeritradeAPI.instrumentsToInstrumentDictStruct","page":"Instruments","title":"TDAmeritradeAPI.instrumentsToInstrumentDictStruct","text":"instrumentsToInstrumentDictStruct(json_string::String)::ErrorTypes.Option{InstrumentDict}\n\nConvert the JSON string returned by the TDAmeritradeAPI search_instruments API call to an InstrumentDict struct.\n\nThis is largely an internal function to allow later conversions to DataFrame with proper type conversions.\n\nAn ErrorTypes.jl Option object will be returned that can be evaluated with ErrorTypes.@?\n\nExample\n\ninstrumentsToInstrumentDictStruct(read(\"./test/sample/instrument_search_multiple_results.json\", String))\nsome(TDAmeritradeAPI.InstrumentDict(Symbol(\"594NSP015\") => TDAmeritradeAPI.Instrument\n[...]\n, :MSFT33 => TDAmeritradeAPI.Instrument\n[...]\n, :MSFT => TDAmeritradeAPI.Instrument\n[...]\n\n\n\n\n\n","category":"function"},{"location":"instruments/#instrumentsToInstrumentArrayStruct","page":"Instruments","title":"instrumentsToInstrumentArrayStruct","text":"","category":"section"},{"location":"instruments/","page":"Instruments","title":"Instruments","text":"instrumentsToInstrumentArrayStruct","category":"page"},{"location":"instruments/#TDAmeritradeAPI.instrumentsToInstrumentArrayStruct","page":"Instruments","title":"TDAmeritradeAPI.instrumentsToInstrumentArrayStruct","text":"instrumentsToInstrumentArrayStruct(json_string::String)::ErrorTypes.Option{InstrumentArray}\n\nConvert the JSON string returned by the TDAmeritradeAPI get_instrument API call to an InstrumentArray struct.\n\nThis is largely an internal function to allow later conversions to DataFrame with proper type conversions.\n\nAn ErrorTypes.jl Option object will be returned that can be evaluated with ErrorTypes.@?\n\nExample\n\ninstrumentsToInstrumentArrayStruct(read(\"./test/sample/instrument_equity.json\", String))\nsome(TDAmeritradeAPI.Instrument[TDAmeritradeAPI.Instrument(nothing, \"18915M107\", \"NET\", \"CLOUDFLARE INC COM CL A\", \"EQY\", \"EQUITY\", nothing)])\n\n\n\n\n\n","category":"function"},{"location":"instruments/#instrumentsToJSON","page":"Instruments","title":"instrumentsToJSON","text":"","category":"section"},{"location":"instruments/","page":"Instruments","title":"Instruments","text":"instrumentsToJSON","category":"page"},{"location":"instruments/#TDAmeritradeAPI.instrumentsToJSON","page":"Instruments","title":"TDAmeritradeAPI.instrumentsToJSON","text":"instrumentsToJSON(i::Union{InstrumentArray, InstrumentDict})::ErrorTypes.Option{String}\n\nConvert an InstrumentArray or InstrumentDict struct to a JSON object.\n\nAn ErrorTypes.jl Option object will be returned that can be evaluated with ErrorTypes.@?\n\nThe returned JSON will not be in the same format as the initial return from the TDAmeritradeAPI call.\n\nExample\n\ns = @?(instrumentsToInstrumentArrayStruct(read(\"./test/sample/instrument_equity.json\", String)))\n\ninstrumentsToJSON(s)\nsome(\"[{\"bondPrice\":null,\"cusip\":\"18915M107\",\"symbol\":\"NET\",\"description\":\"CLOUDFLARE INC COM CL A\",\"exchange\":\"EQY\",\"assetType\":\"EQUITY\",\"fundamental\":null}]\")\n\n\n\n\n\n","category":"function"},{"location":"optionChain/#api_getOptionChainAsJSON","page":"Option Chain","title":"api_getOptionChainAsJSON","text":"","category":"section"},{"location":"optionChain/","page":"Option Chain","title":"Option Chain","text":"api_getOptionChainAsJSON","category":"page"},{"location":"optionChain/#TDAmeritradeAPI.api_getOptionChainAsJSON","page":"Option Chain","title":"TDAmeritradeAPI.api_getOptionChainAsJSON","text":"api_getOptionChainAsJSON(symbol::String, apiKeys::TDAmeritradeAPI.apiKeys; kw...)::ErrorTypes.Option{DataFrame}\n\nMake the TDAmeritradeAPI call to the get_option_chain endpoint, and return the raw JSON.\n\nAn ErrorTypes.jl Option object will be returned that can be evaluated with ErrorTypes.@?\n\nArguments\n\nsymbol::String: the underlying stock symbol to fetch the Option Chain for.\napiKeys::TDAmeritradeAPI.apiKeys: the apiKeys object containing the CUST_KEY, access   and refresh tokens.\n\nKeywords\n\ncontractType::String = \"ALL\": Type of contracts to return in the chain. Can be CALL, PUT, or ALL. \nstrikeCount::Int64 = 25: The number of strikes to return above and below the at-the-money price.\nincludeQuotes::Bool = false: Include quotes for options in the option chain. Can be TRUE or FALSE. \nstrategy::String = \"SINGLE\": Passing a value returns a Strategy Chain. Possible values are SINGLE,    COVERED, VERTICAL, CALENDAR, STRANGLE, STRADDLE, BUTTERFLY, CONDOR, DIAGONAL, COLLAR, or ROLL\ninterval::Int64 = 10: Strike interval for spread strategy chains\nstrike::Union{Float64, Nothing} = nothing: Provide a strike price to return options only at that    strike price.\nrange::String = \"ALL\": Returns options for the given range. Possible values are:   ITM: In-the-money   NTM: Near-the-money   OTM: Out-of-the-money   SAK: Strikes Above Market   SBK: Strikes Below Market   SNK: Strikes Near Market   ALL: All Strikes\nfromDate::Date = today(): Only return expirations after this date. For strategies, expiration refers    to the nearest term expiration in the strategy.    Valid ISO-8601 formats are: yyyy-MM-dd and yyyy-MM-dd'T'HH:mm:ssz.'\ntoDate::Union{Date, Nothing} = nothing: Only return expirations before this date. For strategies,    expiration refers to the nearest term expiration in the strategy.    Valid ISO-8601 formats are: yyyy-MM-dd and yyyy-MM-dd'T'HH:mm:ssz.'\nexpMonth::String = \"ALL\": Return only options expiring in the specified month.    Month is given in the three character format. Example: JAN\noptionType::String = \"ALL\": Type of contracts to return. Possible values are:   S: Standard contracts   NS: Non-standard contracts   ALL: All contracts\n\n\n\n\n\n","category":"function"},{"location":"optionChain/#api_getOptionChainAsDataFrame","page":"Option Chain","title":"api_getOptionChainAsDataFrame","text":"","category":"section"},{"location":"optionChain/","page":"Option Chain","title":"Option Chain","text":"api_getOptionChainAsDataFrame","category":"page"},{"location":"optionChain/#TDAmeritradeAPI.api_getOptionChainAsDataFrame","page":"Option Chain","title":"TDAmeritradeAPI.api_getOptionChainAsDataFrame","text":"api_getOptionChainAsDataFrame(symbol::String, apiKeys::TDAmeritradeAPI.apiKeys; kw...)::ErrorTypes.Option{DataFrame}\n\nMake the TDAmeritradeAPI call to the get_option_chain endpoint, and return a DataFrame\n\nAn ErrorTypes.jl Option object will be returned that can be evaluated with ErrorTypes.@?\n\nArguments\n\nSee api_getOptionChainAsJSON.\n\n\n\n\n\n","category":"function"},{"location":"optionChain/#parseOptionChainJSONToDataFrame","page":"Option Chain","title":"parseOptionChainJSONToDataFrame","text":"","category":"section"},{"location":"optionChain/","page":"Option Chain","title":"Option Chain","text":"parseOptionChainJSONToDataFrame","category":"page"},{"location":"optionChain/#TDAmeritradeAPI.parseOptionChainJSONToDataFrame","page":"Option Chain","title":"TDAmeritradeAPI.parseOptionChainJSONToDataFrame","text":"parseOptionChainJSONToDataFrame(json_string::String)::ErrorTypes.Option{DataFrame}\n\nConvert the JSON string returned by the TDAmeritradeAPI get_option_chain API call to a DataFrame.\n\nThe put and call maps will be appended into a single DataFrame, with the PUT rows coming first.\n\nNested JSON objects will be flattened into columns in the output DataFrame.\n\nAn ErrorTypes.jl Option object will be returned that can be evaluated with ErrorTypes.@?\n\nExample\n\nparseOptionChainJSONToDataFrame(js)\nsome(596x52 DataFrame\n Row | Status  Underlying UnderlyingPrice putCall symbol description exchangeName bid ask\n[...]\n\n\n\n\n\n","category":"function"},{"location":"optionChain/#optionChainToOptionChainStruct","page":"Option Chain","title":"optionChainToOptionChainStruct","text":"","category":"section"},{"location":"optionChain/","page":"Option Chain","title":"Option Chain","text":"optionChainToOptionChainStruct","category":"page"},{"location":"optionChain/#TDAmeritradeAPI.optionChainToOptionChainStruct","page":"Option Chain","title":"TDAmeritradeAPI.optionChainToOptionChainStruct","text":"optionChainToOptionChainStruct(json_string::String)::ErrorTypes.Option{OptionChain}\n\nConvert the JSON string returned by the TDAmeritradeAPI get_option_chain API call to an OptionChain struct.\n\nThis is largely an internal function to allow later conversions to DataFrame with proper type conversions.\n\nAn ErrorTypes.jl Option object will be returned that can be evaluated with ErrorTypes.@?\n\nExample\n\noptionChainToOptionChainStruct(js)\nsome(TDAmeritradeAPI.OptionChain(\"NET\", \"SUCCESS\", nothing, \"SINGLE\", 0.0, true, false, 0.1,\n[...]\n\n\n\n\n\n","category":"function"},{"location":"optionChain/#optionChainToJSON","page":"Option Chain","title":"optionChainToJSON","text":"","category":"section"},{"location":"optionChain/","page":"Option Chain","title":"Option Chain","text":"optionChainToJSON","category":"page"},{"location":"optionChain/#TDAmeritradeAPI.optionChainToJSON","page":"Option Chain","title":"TDAmeritradeAPI.optionChainToJSON","text":"optionChainToJSON(oc::OptionChain)::ErrorTypes.Option{String}\n\nConvert an OptionChain struct oc to a JSON object.\n\nAn ErrorTypes.jl Option object will be returned that can be evaluated with ErrorTypes.@?\n\nThe returned JSON will not be in the same format as the initial return from the TDAmeritradeAPI call.\n\nExample\n\nTDAmeritradeAPI.optionChainToJSON(oc)\nsome(\"{\"symbol\":\"NET\",\"status\":\"SUCCESS\",\"underlying\":null,\"strategy\":\"SINGLE\" \n[...]\n\n\n\n\n\n","category":"function"},{"location":"","page":"Documentation","title":"Documentation","text":"CurrentModule = TDAmeritradeAPI","category":"page"},{"location":"#TDAmeritradeAPI","page":"Documentation","title":"TDAmeritradeAPI","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Documentation for TDAmeritradeAPI.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"This package provides convinience functions to format the return JSON into DataFrames.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"API Defintion, and basic guides can be found at: https://developer.tdameritrade.com/apis","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"All API calls utilize the ErrorTypes for safe error handling.","category":"page"},{"location":"#Installation","page":"Documentation","title":"Installation","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Pkg.add(\"TDAmeritradeAPI\")","category":"page"},{"location":"#Usage","page":"Documentation","title":"Usage","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"using TDAmeritradeAPI\nusing Dates, ErrorTypes\n\nkeys = TDAmeritradeAPI.apiKeys(<your cust key>, \"\", now(), \"\", now(), now() - Minute(30), \"unauthorized\");","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Call the PriceHistory API and return a JSON String","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"jsonQQQ = ErrorTypes.@?(TDAmeritradeAPI.api_getPriceHistoryAsJSON(\"QQQ\", keys))","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Every method also has a AsDataFrame version that will parse the JSON and return a DataFrame","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"dfQQQ = ErrorTypes.@?(TDAmeritradeAPI.api_getPriceHistoryAsJSON(\"QQQ\", keys))","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"The Price History API additionally provides a function that returns a TimeSeries.TimeArray: api_getPriceHistoryAsTimeArray","category":"page"},{"location":"#Ticker-Symbol-support","page":"Documentation","title":"Ticker Symbol support","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Any API call that uses the symbol as part of the URL will not support FUTURES, FOREX, or INDEX symbols with a / or $ in the symbol.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Any API call that uses the query string, or the message body can encode the symbol and support FUTURES, FOREX, and INDEX symbols","category":"page"},{"location":"#TimeZone-Notes","page":"Documentation","title":"TimeZone Notes","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"All Dates are in the America/NewYork timezone as returned by the API The Price History DateTime values reflect when the candle was opened","category":"page"},{"location":"#Symbol-examples","page":"Documentation","title":"Symbol examples","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Index Symbols: SPX.X, COMPX, DJI\nForex Symbols: USD/CAD\nFutures Symbols: /ES, /NQ","category":"page"},{"location":"#Implementation-Notes","page":"Documentation","title":"Implementation Notes","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"At this point only the API calls that do not require authentication are implemented.  Without authentication, these will all return 15 minute delayed data. Here is the list of implemented API","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Quotes\nInstruments\nPrice History\nOptions Chain\nMovers\nMarket Hours","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Additional API that require Authentication that I will focus on implementing in the near future","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Authentication\nAccounts and Trading (Order Creation)\nTransaction History\nUser Info and Preferences\nWatchlists\nWebSocket Streaming Data (Allows access to real-time streaming data, as well as OHLC data for FOREX, and FUTURES not supported by the Price History API)","category":"page"},{"location":"#Public-Function-List","page":"Documentation","title":"Public Function List","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"All defined API endpoints can be seen by calling the listEndpoints() function:","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"listEndpoints","category":"page"},{"location":"#TDAmeritradeAPI.listEndpoints","page":"Documentation","title":"TDAmeritradeAPI.listEndpoints","text":"   listEndpoints()::Dict{String, Dict{String, String}}\n\nReturn a Dict of all valid TDAmeritrade API endpoints where \n\nendpoint_name => {\"uri\", \"type\"}\n\nExample\n\nlistEndpoints()\nDict{String, Dict{String, String}} with 37 entries:\n  \"get_quotes\" => Dict(\"uri\"=>\"marketdata/quotes\", \"type\"=>\"GET\")\n\n\n\n\n\n","category":"function"}]
}
